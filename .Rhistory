library(tidyr)
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("data/Mtros_GO.txt", sep= " ", header = TRUE)
# Remove the "V11" column, not sure what it is
masterID <- masterID[, -which(names(masterID) == "V11")]
View(masterID)
# Rename remaining columns
colnames(masterID)  <- c("transcript", "V2", "protein.names","GOterm.BP","GO.IDs")
# Seperate the V2 into its constitutant parts: sp, the uniprot #, geneID, and species
masterID <- separate(masterID, V2, into = c("sp", "uniprot_accession", "geneID", "species"), sep = "[\\|_]")
# remove columns we don't need (V2), reorder the columns to look pretty
masterID <- masterID[, c("transcript", "species", "geneID","uniprot_accession","protein.names","GO.IDs","GOterm.BP")]
FDO_TC_siggene <- read.delim("output/DEG_lists/Foot/FDO_TC_siggene_apeglm.csv", sep = " ", header = TRUE)
FDO_TC_siggene <- left_join(FDO_TC_siggene, masterID, by = "transcript")
View(FDO_TC_siggene)
FDO_TC_normal_res_table <- lfcShrink(dds14_filt,
coef=2,
type="normal")
# CaTCulate DESeq object
dds14 <- DESeqDataSetFromMatrix(countData = FDO_TC_countmatrix,
colData = FDO_TC_treatmentinfo,
design = ~ treatment)
# Filter data
FDO_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | treatment == "control" | treatment == "DO") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "OW"))
read.delim("output/DEG_lists/Foot/FDO_TC_treatmentinfo.csv", sep= " ", header = TRUE)
FDO_TC_treatmentinfo <- read.delim("output/DEG_lists/Foot/FDO_TC_treatmentinfo.csv", sep= " ", header = TRUE)
View(FDO_TC_treatmentinfo)
FDO_TC_treatmentinfo <- read.delim("output/DEG_lists/Foot/FDO_TC_treatmentinfo.csv", sep= ",", header = TRUE)
FDO_TC_treatmentinfo <- read.delim("output/DEG_lists/Foot/FDO_TC_treatmentinfo.csv", sep= " ", header = TRUE)
gene_count_matrix <- read_csv("output/13-Hisat/gene_count_matrix.csv")
rownames(gene_count_matrix) <- gene_count_matrix$gene_id
rownames <- rownames(gene_count_matrix)
gene_count_matrix <- gene_count_matrix[,-1]
rownames(gene_count_matrix) <- rownames
View(gene_count_matrix)
#Change column names in count matrix to adjust to sample name in treatment info
new_column_names <- substr(names(gene_count_matrix), 4, nchar(names(gene_count_matrix)) - 5)
names(gene_count_matrix) <- new_column_names
#Remove remaining periods that are at the front of column names
remove_dash <- function(col_name) {
if (grepl("^\\-", col_name)) {
# Remove period from the beginning of the column name
return(sub("^\\-", "", col_name))
} else {
# Keep the column name unchanged
return(col_name)
}
}
# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_dash)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
#clean up data, get rid of NA's and blank cells, and put samples in order
gene_count_matrix <- gene_count_matrix[, order(names(gene_count_matrix))]
treatmentinfo.2 <- treatmentinfo.2[order(treatmentinfo.2),]
treatmentinfo <- read.csv("data/PSMFC-mytilus-byssus-pilot-RNA-tagseq_raw.csv", header = TRUE, sep = ",")
treatmentinfo
# Get the tissue ID from the sample name, extract last character of sample ID
treatmentinfo$tissue <- substr(treatmentinfo$sample.1, nchar(treatmentinfo$sample.1) - 0, nchar(treatmentinfo$sample.1))
#extract last character of treatment ID to get day of treatment
treatmentinfo$day <- substr(treatmentinfo$trt, nchar(treatmentinfo$trt) - 0, nchar(treatmentinfo$trt))
#Extract treatment from treatment column
## Split each entry based on underscores
split_entries <- strsplit(treatmentinfo$trt, "_")
## Extract the middle part (assuming there is a middle part)
middle_parts <- sapply(split_entries, function(x) if(length(x) >= 3) x[2] else NA)
## Assign the extracted middle parts to a new column named "middle"
treatmentinfo$treatment <- middle_parts
#Make subset of sample ID, treatment, tissue harvested, day
treatmentinfo.2 <- treatmentinfo[, c("sample.1","tissue", "treatment", "day")]
#Change column names in count matrix to adjust to sample name in treatment info
countmatrix_2 <- countmatrix
treatmentinfo.2 <- treatmentinfo.2[order(treatmentinfo.2),]
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
rownames(treatmentinfo.2) <- treatmentinfo.2$sample.1
#Removing T047 from treatment info because there isn't data for that
removal <- which(rownames(treatmentinfo.2)%in% "T047F")
treatmentinfo.2 <- treatmentinfo.2[-removal,]
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
View(gene_count_matrix)
gene_count_matrix <- read_csv("output/13-Hisat/gene_count_matrix.csv")
rownames(gene_count_matrix) <- gene_count_matrix$gene_id
View(gene_count_matrix)
rownames <- rownames(gene_count_matrix)
gene_count_matrix <- gene_count_matrix[,-1]
rownames(gene_count_matrix) <- rownames
#Change column names in count matrix to adjust to sample name in treatment info
new_column_names <- substr(names(gene_count_matrix), 4, nchar(names(gene_count_matrix)) - 5)
names(gene_count_matrix) <- new_column_names
#Remove remaining periods that are at the front of column names
remove_dash <- function(col_name) {
if (grepl("^\\-", col_name)) {
# Remove period from the beginning of the column name
return(sub("^\\-", "", col_name))
} else {
# Keep the column name unchanged
return(col_name)
}
}
# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_dash)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
#clean up data, get rid of NA's and blank cells, and put samples in order
gene_count_matrix <- gene_count_matrix[, order(names(gene_count_matrix))]
treatmentinfo <- read.csv("data/PSMFC-mytilus-byssus-pilot-RNA-tagseq_raw.csv", header = TRUE, sep = ",")
treatmentinfo
# Get the tissue ID from the sample name, extract last character of sample ID
treatmentinfo$tissue <- substr(treatmentinfo$sample.1, nchar(treatmentinfo$sample.1) - 0, nchar(treatmentinfo$sample.1))
#extract last character of treatment ID to get day of treatment
treatmentinfo$day <- substr(treatmentinfo$trt, nchar(treatmentinfo$trt) - 0, nchar(treatmentinfo$trt))
#Extract treatment from treatment column
## Split each entry based on underscores
split_entries <- strsplit(treatmentinfo$trt, "_")
## Extract the middle part (assuming there is a middle part)
middle_parts <- sapply(split_entries, function(x) if(length(x) >= 3) x[2] else NA)
## Assign the extracted middle parts to a new column named "middle"
treatmentinfo$treatment <- middle_parts
#Make subset of sample ID, treatment, tissue harvested, day
treatmentinfo.2 <- treatmentinfo[, c("sample.1","tissue", "treatment", "day")]
#Change column names in count matrix to adjust to sample name in treatment info
countmatrix_2 <- countmatrix
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
rownames(treatmentinfo.2) <- treatmentinfo.2$sample.1
#Removing T047 from treatment info because there isn't data for that
removal <- which(rownames(treatmentinfo.2)%in% "T047F")
treatmentinfo.2 <- treatmentinfo.2[-removal,]
View(treatmentinfo.2)
# Get the tissue ID from the sample name, extract last character of sample ID
treatmentinfo$tissue <- substr(treatmentinfo$sample.1, nchar(treatmentinfo$sample.1) - 0, nchar(treatmentinfo$sample.1))
#extract last character of treatment ID to get day of treatment
treatmentinfo$day <- substr(treatmentinfo$trt, nchar(treatmentinfo$trt) - 0, nchar(treatmentinfo$trt))
#Extract treatment from treatment column
## Split each entry based on underscores
split_entries <- strsplit(treatmentinfo$trt, "_")
## Extract the middle part (assuming there is a middle part)
middle_parts <- sapply(split_entries, function(x) if(length(x) >= 3) x[2] else NA)
## Assign the extracted middle parts to a new column named "middle"
treatmentinfo$treatment <- middle_parts
#Make subset of sample ID, treatment, tissue harvested, day
treatmentinfo.2 <- treatmentinfo[, c("sample.1","tissue", "treatment", "day")]
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
rownames(treatmentinfo.2) <- treatmentinfo.2$sample.1
#Removing T047 from treatment info because there isn't data for that
removal <- which(rownames(treatmentinfo.2)%in% "T047F")
treatmentinfo.2 <- treatmentinfo.2[-removal,]
View(gene_count_matrix)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
View(gene_count_matrix)
rownames(gene_count_matrix) <- rownames
View(gene_count_matrix)
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(countmatrix_2))
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
#clean up data, get rid of NA's and blank cells, and put samples in order
gene_count_matrix <- gene_count_matrix[, order(names(gene_count_matrix))]
rownames(gene_count_matrix) <- rownames
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
treatmentinfo.2 <- treatmentinfo.2[order(treatmentinfo.2),]
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
write.table(gene_count_matrix, file = "../output/13-Hisat/", row.names = FALSE)
write.table(gene_count_matrix, file = "../output/13-Hisat/", row.names = FALSE)
write.table(gene_count_matrix, file = "../byssus-exp-analysis/output/13-Hisat/", row.names = FALSE)
write.table(gene_count_matrix, file = "/byssus-exp-analysis/output/13-Hisat/", row.names = FALSE)
write.table(gene_count_matrix, file = "byssus-exp-analysis/output/13-Hisat/", row.names = FALSE)
write.table(gene_count_matrix, file = "output/13-Hisat/", row.names = FALSE)
getwd()
write.table(gene_count_matrix, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/13-Hisat/", row.names = FALSE)
View(gene_count_matrix)
# Filter data
FDO_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | treatment == "control" | treatment == "DO") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "OW"))
FDO_TC_treatmentinfo <- FDO_TC_treatmentinfo %>%
filter(!(treatment == "control" & day == "0"))
View(FDO_TC_treatmentinfo)
FDO_TC_countmatrix <- subset(gene_count_matrix, select=row.names(FDO_TC_treatmentinfo))
View(FDO_TC_countmatrix)
rownames(FDO_TC_countmatrix) <- rownames
View(FDO_TC_countmatrix)
gene_count_matrix1 <- read_csv("output/13-Hisat/gene_count_matrix.csv")
View(gene_count_matrix1)
View(FDO_TC_countmatrix)
gene_count_matrix <- read_csv("output/13-Hisat/gene_count_matrix.csv")
gene_count_matrix <- data.frame(gene_count_matrix)
View(gene_count_matrix)
rownames(gene_count_matrix) <- gene_count_matrix$gene_id
gene_count_matrix <- gene_count_matrix[,-1]
#Change column names in count matrix to adjust to sample name in treatment info
new_column_names <- substr(names(gene_count_matrix), 4, nchar(names(gene_count_matrix)) - 5)
names(gene_count_matrix) <- new_column_names
#Remove remaining periods that are at the front of column names
remove_dash <- function(col_name) {
if (grepl("^\\-", col_name)) {
# Remove period from the beginning of the column name
return(sub("^\\-", "", col_name))
} else {
# Keep the column name unchanged
return(col_name)
}
}
# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_dash)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
remove_periods <- function(col_name) {
if (grepl("^\\.", col_name)) {
# Remove period from the beginning of the column name
return(sub("^\\.", "", col_name))
} else {
# Keep the column name unchanged
return(col_name)
}
}
# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_periods)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
View(gene_count_matrix1)
#clean up data, get rid of NA's and blank cells, and put samples in order
gene_count_matrix <- gene_count_matrix[, order(names(gene_count_matrix))]
treatmentinfo.2 <- treatmentinfo.2[order(treatmentinfo.2),]
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
write.table(gene_count_matrix, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/13-Hisat/", row.names = FALSE)
# Filter data
FDO_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | treatment == "control" | treatment == "DO") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "OW"))
View(FDO_TC_treatmentinfo)
# Filter data
FDO_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | tissue == "X" | treatment == "control" | treatment == "DO") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "OW"))
FDO_TC_treatmentinfo <- FDO_TC_treatmentinfo %>%
filter(!(treatment == "control" & day == "0" & tissue == "X"))
write.table(FDO_TC_treatmentinfo, file = "output/DEG_lists/Foot/FDO_TC_treatmentinfo.csv", row.names = FALSE)
FDO_TC_countmatrix <- subset(gene_count_matrix, select=row.names(FDO_TC_treatmentinfo))
View(FDO_TC_countmatrix)
View(gene_count_matrix)
write.table(FDO_TC_countmatrix, file = "output/DEG_lists/Foot/FDO_TC_countmatrix.csv", row.names = FALSE)
write.table(FDO_TC_countmatrix, file = "output/DEG_lists/Foot/FDO_TC_countmatrix.csv", row.names = FALSE)
# CaTCulate DESeq object
dds14 <- DESeqDataSetFromMatrix(countData = FDO_TC_countmatrix,
colData = FDO_TC_treatmentinfo,
design = ~ treatment)
dds14 <- DESeq(dds14)
resultsNames(dds14) # lists the coefficients
PCAdata <- plotPCA(vst(dds14), intgroup = c("treatment"), returnData=TRUE)
# -- note: fitType='parametric', but the dispersion trend was not well captured by the
#    function: y = a/x + b, and a local regression fit was automatically substituted.
#    specify fitType='local' or 'mean' to avoid this message next time.
percentVar <- round(100*attr(PCAdata, "percentVar")) #plot PCA of samples with all data
ggplot(PCAdata, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)
View(FDO_TC_countmatrix)
# Filtering: keep genes that have at least 10 counts across 1/3 of the samples - https://support.bioconductor.org/p/110307/
keep <- rowSums(DESeq2::counts(dds14) >= 10) >= ncol(FDO_TC_countmatrix)/3
dds14_filt <- dds14[keep,]
# Filter data
FOW_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | treatment == "control" | treatment == "OW") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "DO"))
FOW_TC_treatmentinfo <- FOW_TC_treatmentinfo %>%
filter(!(treatment == "control" & day == "0" & tissue == "X"))
View(FOW_TC_treatmentinfo)
FOW_TC_treatmentinfo <- FOW_TC_treatmentinfo %>%
filter(!(treatment == "control" & day == "0" & tissue == "X"))
# Filter data
FDO_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | tissue == "X" | treatment == "control" | treatment == "DO") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "OW" | day == "0"))
FDO_TC_treatmentinfo <- FDO_TC_treatmentinfo %>%
filter(!(treatment == "control" & day == "0" & tissue == "X"))
write.table(FDO_TC_treatmentinfo, file = "output/DEG_lists/Foot/FDO_TC_treatmentinfo.csv", row.names = FALSE)
FDO_TC_countmatrix <- subset(gene_count_matrix, select=row.names(FDO_TC_treatmentinfo))
View(gene_count_matrix)
write.table(FDO_TC_countmatrix, file = "output/DEG_lists/Foot/FDO_TC_countmatrix.csv", row.names = FALSE)
# CaTCulate DESeq object
dds14 <- DESeqDataSetFromMatrix(countData = FDO_TC_countmatrix,
colData = FDO_TC_treatmentinfo,
design = ~ treatment)
dds14 <- DESeq(dds14)
resultsNames(dds14) # lists the coefficients
PCAdata <- plotPCA(vst(dds14), intgroup = c("treatment"), returnData=TRUE)
# -- note: fitType='parametric', but the dispersion trend was not well captured by the
#    function: y = a/x + b, and a local regression fit was automatically substituted.
#    specify fitType='local' or 'mean' to avoid this message next time.
percentVar <- round(100*attr(PCAdata, "percentVar")) #plot PCA of samples with all data
ggplot(PCAdata, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)
# Filtering: keep genes that have at least 10 counts across 1/3 of the samples - https://support.bioconductor.org/p/110307/
keep <- rowSums(DESeq2::counts(dds14) >= 10) >= ncol(FDO_TC_countmatrix)/3
dds14_filt <- dds14[keep,]
# Filter data
FOW_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | treatment == "control" | treatment == "OW") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "DO"))
# Filter data
FOW_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | treatment == "control" | treatment == "OW") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "DO" | day == "0"))
# Filter data
FOW_TC_treatmentinfo <- treatmentinfo.2 %>% filter(tissue == "F" | tissue == "X" | treatment == "control" | treatment == "OW") %>% filter(!(tissue == "G" | treatment == "OA" | treatment == "DO" | day == "0"))
write.table(FOW_TC_treatmentinfo, file = "output/DEG_lists/Foot/FOW_TC_treatmentinfo.csv", row.names = FALSE)
FOW_TC_countmatrix <- subset(gene_count_matrix, select=row.names(FOW_TC_treatmentinfo))
View(FOW_TC_countmatrix)
write.table(FOW_TC_countmatrix, file = "output/DEG_lists/Foot/FOW_TC_countmatrix.csv", row.names = FALSE)
# CaTCulate DESeq object
dds13 <- DESeqDataSetFromMatrix(countData = FOW_TC_countmatrix,
colData = FOW_TC_treatmentinfo,
design = ~ treatment)
dds13 <- DESeq(dds13)
resultsNames(dds13) # lists the coefficients
PCAdata <- plotPCA(vst(dds13), intgroup = c("treatment"), returnData=TRUE)
percentVar <- round(100*attr(PCAdata, "percentVar")) #plot PCA of samples with all data
ggplot(PCAdata, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)
# Filtering: keep genes that have at least 10 counts across 1/3 of the samples - https://support.bioconductor.org/p/110307/
keep <- rowSums(DESeq2::counts(dds13) >= 10) >= ncol(FOW_TC_countmatrix)/3
dds13_filt <- dds13[keep,]
PCAdata <- plotPCA(vst(dds13), intgroup = c("treatment"), returnData=TRUE)
percentVar <- round(100*attr(PCAdata, "percentVar")) #plot PCA of samples with all data
ggplot(PCAdata, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)
PCAdata <- plotPCA(vst(dds14), intgroup = c("treatment"), returnData=TRUE)
# -- note: fitType='parametric', but the dispersion trend was not well captured by the
#    function: y = a/x + b, and a local regression fit was automatically substituted.
#    specify fitType='local' or 'mean' to avoid this message next time.
percentVar <- round(100*attr(PCAdata, "percentVar")) #plot PCA of samples with all data
ggplot(PCAdata, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVar[1],"% variance")) +
ylab(paste0("PC2: ",percentVar[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)
keep <- rowSums(DESeq2::counts(dds14) >= 10) >= ncol(FDO_TC_countmatrix)/3
dds14_filt <- dds14[keep,]
FDO_TC_normal_res_table <- lfcShrink(dds14_filt,
coef=2,
type="normal")
FDO_TC_apeglm_res_table <- lfcShrink(dds14_filt,
coef=2,
type="apeglm")
FDO_TC_ashr_res_table   <- lfcShrink(dds14_filt,
coef=2,
type="ashr")
FDO_TC_apeglm_df <- FDO_TC_apeglm_res_table %>%
data.frame() %>%
rownames_to_column(var="gene")
View(FDO_TC_apeglm_df)
FDO_TC_normal_df <- FDO_TC_normal_res_table  %>%
data.frame() %>%
rownames_to_column(var="gene")
FDO_TC_ashr_df <- FDO_TC_ashr_res_table %>%
data.frame() %>%
rownames_to_column(var="gene")
View(FDO_TC_apeglm_df)
# Write csv's with significant genes
#ignore rowname numbers with row.names = FALSE, not included as separate column
write.table(FDO_TC_apeglm_df, file = "output/DEG_lists/Foot/FDO_TC_apeglm.csv", row.names = FALSE)
padj.cutoff <- 0.05 # pvalue cut-off
FDO_TC_siggenes_apeglm <- FDO_TC_apeglm_df %>%
filter(padj < padj.cutoff)
FDO_TC_sig_genes_ashr<- FDO_TC_ashr_df %>%
filter(padj < padj.cutoff)
FDO_TC_sig_genes_normal<- FDO_TC_normal_df %>%
filter(padj < padj.cutoff)
View(FDO_TC_siggenes_apeglm)
write.table(FDO_TC_siggenes_apeglm, file = "output/DEG_lists/Foot/FDO_TC_siggene_apeglm.csv", row.names = FALSE)
gene_counts_FDO_TC <- as.data.frame(c(nrow(FDO_TC_countmatrix),nrow(dds14_filt),(nrow(FDO_TC_countmatrix)-nrow(dds14_filt)),nrow(FDO_TC_normal_res_table),nrow(FDO_TC_apeglm_res_table),nrow(FDO_TC_ashr_res_table),nrow(FDO_TC_siggenes_apeglm),nrow(FDO_TC_sig_genes_ashr),nrow(FDO_TC_sig_genes_normal)))
row.names(gene_counts_FDO_TC) <- c("total transcripts","genes_after_filtering","genes_dropped",
"DEGs_all-genes-normal",
"DEGs_all-genes-apeglm","DEGs_all-genes-ashr",
"DEG_apeglm-p0.05","DEG_ashr-p0.05","DEG_normal-p0.05")
View(gene_counts_FDO_TC)
#write.csv for the gene count summaries
colnames(gene_counts_FDO_TC) <- "count"
write.table(gene_counts_FDO_TC, file = "output/DEG_lists/Foot/gene_counts_FDO_TC.csv", row.names = TRUE)
pdf(file= "output/DEG_lists/Foot/FDO_TC_MA_plots.pdf" )
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
DESeq2::plotMA(FDO_TC_normal_res_table, xlim=xlim, ylim=ylim, main="normal", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(FDO_TC_apeglm_res_table, xlim=xlim, ylim=ylim, main="apeglm", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(FDO_TC_ashr_res_table, xlim=xlim, ylim=ylim, main="ashr", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
dev.off()
FOW_TC_normal_res_table <- lfcShrink(dds13_filt,
coef=2,
type="normal")
FOW_TC_apeglm_res_table <- lfcShrink(dds13_filt,
coef=2,
type="apeglm") # lfcThreshold = 0.585)
FOW_TC_ashr_res_table   <- lfcShrink(dds13_filt,
coef=2,
type="ashr")
FOW_TC_apeglm_df <- FOW_TC_apeglm_res_table %>%
data.frame() %>%
rownames_to_column(var="gene")
FOW_TC_normal_df <- FOW_TC_normal_res_table  %>%
data.frame() %>%
rownames_to_column(var="gene")
FOW_TC_ashr_df <- FOW_TC_ashr_res_table %>%
data.frame() %>%
rownames_to_column(var="gene")
View(FOW_TC_apeglm_df)
write.table(FOW_TC_apeglm_df, file = "output/DEG_lists/Foot/FOW_TC_apeglm.csv", row.names = FALSE)
padj.cutoff <- 0.05 # pvalue cut-off
FOW_TC_siggenes_apeglm <- FOW_TC_apeglm_df %>%
filter(padj < padj.cutoff)
FOW_TC_sig_genes_ashr<- FOW_TC_ashr_df %>%
filter(padj < padj.cutoff)
FOW_TC_sig_genes_normal<- FOW_TC_normal_df %>%
filter(padj < padj.cutoff)
write.table(FOW_TC_siggenes_apeglm, file = "output/DEG_lists/Foot/FOW_TC_siggene.csv", row.names = FALSE)
View(FOW_TC_siggenes_apeglm)
gene_counts_FOW_TC <- as.data.frame(c(nrow(FOW_TC_countmatrix),nrow(dds13_filt),(nrow(FOW_TC_countmatrix)-nrow(dds13_filt)),nrow(FOW_TC_normal_res_table),nrow(FOW_TC_apeglm_res_table),nrow(FOW_TC_ashr_res_table),nrow(FOW_TC_siggenes_apeglm),nrow(FOW_TC_sig_genes_ashr),nrow(FOW_TC_sig_genes_normal)))
row.names(gene_counts_FOW_TC) <- c("total transcripts","genes_after_filtering","genes_dropped",
"DEGs_all-genes-normal",
"DEGs_all-genes-apeglm","DEGs_all-genes-ashr",
"DEG_apeglm-p0.05", "DEG_ashr-p0.05","DEG_normal-p0.05")
colnames(gene_counts_FOW_TC) <- "count"
write.table(gene_counts_FOW_TC, file = "output/DEG_lists/Foot/gene_counts_FOW_TC.csv", row.names = TRUE)
pdf(file= "output/DEG_lists/Foot/FOW_TC_MA_plots.pdf" )
par(mfrow=c(1,3), mar=c(4,4,2,1))
xlim <- c(1,1e5); ylim <- c(-3,3)
DESeq2::plotMA(FOW_TC_normal_res_table, xlim=xlim, ylim=ylim, main="normal", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(FOW_TC_apeglm_res_table, xlim=xlim, ylim=ylim, main="apeglm", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
DESeq2::plotMA(FOW_TC_ashr_res_table, xlim=xlim, ylim=ylim, main="ashr", cex=.8)
abline(h=c(-1.5,1.5), col="dodgerblue", lwd=2)
dev.off()
View(masterID)
View(FDO_TC_siggene)
View(FDO_TC_siggenes_apeglm)
View(masterID)
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("data/Mtros_GO.txt", sep= " ", header = TRUE)
View(masterID)
View(FOW_TC_countmatrix)
View(FDO_TC_countmatrix)
View(treatmentinfo.2)
View(FDO_TC_siggenes_apeglm)
View(FDO_TC_apeglm_df)
#Volcano Plots
library(ggplot2)
ggplot(FOW_TC_apeglm_df, aes(x=log2FoldChange, y=padj)) +
geom_point(aes(color=significant)) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot",
x="Log2 Fold Change",
y="p-value") +
theme(plot.title = element_text(hjust = 0.5))
FOW_TC_apeglm_df$significant <- FOW_TC_apeglm_df$padj < 0.05
View(FOW_TC_apeglm_df)
ggplot(FOW_TC_apeglm_df, aes(x=log2FoldChange, y=padj)) +
geom_point(aes(color=significant)) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot",
x="Log2 Fold Change",
y="p-value") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(FOW_TC_apeglm_df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(aes(color=significant)) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot",
x="Log2 Fold Change",
y="p-value") +
theme(plot.title = element_text(hjust = 0.5))
#volcano plots
FDO_TC_apeglm_df$significant <- FDO_TC_apeglm_df$padj < 0.05
ggplot(FDO_TC_apeglm_df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(aes(color=significant)) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot",
x="Log2 Fold Change",
y="p-value") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(FDO_TC_apeglm_df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(aes(color=significant)) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot",
x="Log2 Fold Change",
y="-log10 p-value") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(FOW_TC_apeglm_df, aes(x=log2FoldChange, y=-log10(padj))) +
geom_point(aes(color=significant)) +
scale_color_manual(values=c("gray", "red")) +
theme_minimal() +
labs(title="Volcano Plot",
x="Log2 Fold Change",
y="-log10 p-value") +
theme(plot.title = element_text(hjust = 0.5))
reticulate::repl_python()
reticulate::repl_python()
