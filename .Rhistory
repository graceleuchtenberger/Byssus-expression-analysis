# Download tag-seq data
```{bash}
library(GSEABase)
goslims <- "goslim_generic.obo"
goslims_url <- "http://current.geneontology.org/ontology/subsets/goslim_generic.obo"
gseabase_location <- find.package("GSEABase")
goslim_obo_dest <- file.path(gseabase_location, "extdata", goslims, fsep = "/")
download.file(url = goslims_url,
destfile = goslim_obo_dest)
fl <- system.file("extdata", goslims, package="GSEABase")
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO.IDs, sep = ";")
library(GSEABase)
goslims <- "goslim_generic.obo"
goslims_url <- "http://current.geneontology.org/ontology/subsets/goslim_generic.obo"
gseabase_location <- find.package("GSEABase")
goslim_obo_dest <- file.path(gseabase_location, "extdata", goslims, fsep = "/")
download.file(url = goslims_url,
destfile = goslim_obo_dest)
fl <- system.file("extdata", goslims, package="GSEABase")
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO.IDs, sep = ";")
library(tidyverse)
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO.IDs, sep = ";")
FDO_sigs_ID <- read.delim("output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
FDO_sigs_ID <- read.delim("/output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
getwd()
setwd(/home/shared/8TB_HDD_02/graceleuchtenberger/byssus-exp-analysis)
setwd("/home/shared/8TB_HDD_02/graceleuchtenberger/byssus-exp-analysis")
setwd("~/Github/byssus-exp-analysis")
FDO_sigs_ID <- read.delim("/output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
getwd()
FDO_sigs_ID <- read.delim("/output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
FDO_sigs_ID <- read.delim("byssus-exp-analysis/output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
FDO_sigs_ID <- read.delim("output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
FDO_sigs_ID <- read.delim("output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
FDO_sigs_ID <- read.delim("output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", sep = " ", header = TRUE)
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO.IDs, sep = ";")
library(GSEABase)
library(tidyverse)
r
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO.IDs, sep = ";")
View(FDO_sigs_ID_cleaned_separated)
# Vector of GO IDs
FDO_go_ids <- FDO_sigs_ID_cleaned_separated$GO.IDs
# Create custom collection with our GO IDs
FDOmyCollection <- GOCollection(FDO_go_ids)
# Pull out GOslims from GOslim obo file
slim <- getOBOCollection(fl)
# Get Biological Process (BP) GOslims for our GO IDs
slimdf <- goSlim(FDOmyCollection, slim, "BP", verbose)
View(slimdf)
# Convert to list
FDOgomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
View(FDOgomap)
# Map our GOIDs to GOslims
mapped <- lapply(FDOgomap, intersect, ids(FDOmyCollection))
View(mapped)
# sapply needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(FDOgomap, intersect, ids(FDOmyCollection)), paste, collapse=";")
View(slimdf)
View(slimdf)
View(mapped)
# Add self-matching GOIDs to "ids" column, if not present
updated_slimdf <- slimdf
View(updated_slimdf)
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(updated_slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(updated_slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(updated_slimdf$ids) > 0 && nchar(updated_slimdf$ids[nrow(updated_slimdf)]) > 0) {
updated_slimdf[go_id, "ids"] <- paste0(updated_slimdf[go_id, "ids"], "; ", go_id)
} else {
updated_slimdf[go_id, "ids"] <- go_id
}
}
}
}
str(updated_slimdf)
View(updated_slimdf)
View(FDO_sigs_ID_cleaned_separated)
# Group by unique GO ID
grouped_df <- FDO_sigs_ID_cleaned_separated %>% group_by(GO.IDs))%>% summarise(geneID = paste(geneID, collapse = ","))
# Group by unique GO ID
grouped_df <- FDO_sigs_ID_cleaned_separated %>% group_by(GO.IDs) %>% summarise(geneID = paste(geneID, collapse = ","))
View(grouped_df)
# convert the data frame to a named list
my_list <- as.list(grouped_df$geneID)
names(my_list) <- grouped_df$GO.IDs
View(my_list)
gsc <- GeneSetCollection(mapply(function(geneIds, GOID) {
GeneSet(geneIds, collectionType=GOCollection(GOID), setName=GOID)
}, my_list, names(my_list)))
gsc
View(gsc)
mapped_df <- mappedIds(updated_slimdf, FDOmyCollection, GOBPOFFSPRING, gsc)
library(GSEABase)
mapped_df <- mappedIds(updated_slimdf, FDOmyCollection, GOBPOFFSPRING, gsc)
mapped_df <- mappedIds(updated_slimdf, FDOmyCollection, GOBPOFFSPRING, gsc)
# Function for mapping GOIDs to GOslims
mappedIds <- function(df, collection, OFFSPRING, goannotGSC) {
# Split semi-colon delimited strings in df$ids
df$ids_split <- strsplit(as.character(df$ids), ";")
# Determine the maximum number of elements per row
max_elements <- max(lengths(df$ids_split))
# Fill in shorter rows with NA values
df$ids_split <- lapply(df$ids_split, function(x) {
length(x) <- max_elements
x
})
# Combine the split strings into a matrix
ids_mat <- do.call(rbind, df$ids_split)
# Convert the matrix to a data frame
ids_df <- as.data.frame(ids_mat, stringsAsFactors = FALSE)
# Rename the columns of the data frame
colnames(ids_df) <- paste0("ids_", 1:max_elements)
# Combine the original data frame and the new data frame
df <- cbind(df, ids_df)
# Perform the matching operation
mt <- match(toupper(trimws(df$ids_1)), toupper(trimws(names(goannotGSC))))
# Add a new column to the data frame for the "Genes" result
df$Genes <- NA_character_
# Fill in the "Genes" column for rows that have a match
df$Genes[!is.na(mt)] <- vapply(geneIds(goannotGSC)[mt[!is.na(mt)]],
paste, collapse = ";", character(1L))
df <- df %>% dplyr::select(Count, Percent, Term, ids, Genes)
# Return the modified data frame
return(df)
}
mapped_df <- mappedIds(updated_slimdf, FDOmyCollection, GOBPOFFSPRING, gsc)
View(updated_slimdf)
View(slimdf)
View(updated_slimdf)
# Add self-matching GOIDs to "ids" column, if not present
updated_slimdf$ids <- slimdf[,1]
View(updated_slimdf)
# Add self-matching GOIDs to "ids" column, if not present
updated_slimdf$ids <- slimdf[,0]
View(updated_slimdf)
View(updated_slimdf)
View(slimdf)
# Add self-matching GOIDs to "ids" column, if not present
updated_slimdf$ids <- rownames(slimdf)
View(updated_slimdf)
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(updated_slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(updated_slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(updated_slimdf$ids) > 0 && nchar(updated_slimdf$ids[nrow(updated_slimdf)]) > 0) {
updated_slimdf[go_id, "ids"] <- paste0(updated_slimdf[go_id, "ids"], "; ", go_id)
} else {
updated_slimdf[go_id, "ids"] <- go_id
}
}
}
}
str(updated_slimdf)
View(updated_slimdf)
mapped_df <- mappedIds(updated_slimdf, FDOmyCollection, GOBPOFFSPRING, gsc)
View(mapped_df)
View(gsc)
View(my_list)
# Provide column name for first column
mapped_df <- cbind(GOslim.BP = rownames(mapped_df), mapped_df)
rownames(mapped_df) <- NULL
View(mapped_df)
FDO_sigs_ID$GOSlim_terms <- sapply(FDO_sigs_ID_cleaned_separated$GO.IDs, function(go_term) {
goslim_term <- toGOSlim(GOBPA(), keys=go_term)
return(goslim_term)
})
library(GSEABase)
install.packages("AnnotationDbi")
install.packages("AnnotationDbi")
library(AnnotationDbi)
FDO_sigs_ID$GOSlim_terms <- sapply(FDO_sigs_ID_cleaned_separated$GO.IDs, function(go_term) {
goslim_term <- toGOSlim(GOBPA(), keys=go_term)
return(goslim_term)
})
install.packages("AnnotationDbi")
install.packages("AnnotationDbi")
library(AnnotationDbi)
FDO_sigs_ID$GOSlim_terms <- sapply(FDO_sigs_ID_cleaned_separated$GO.IDs, function(go_term) {
goslim_term <- toGOSlim(GOBPA(), keys=go_term)
return(goslim_term)
})
View(FDO_sigs_ID_cleaned_separated)
View(FDO_sigs_ID)
View(FDO_sigs_ID_cleaned_separated)
write.table(FDO_sigs_ID, file = "output/DEG_lists/Foot/FDO_sigs_ID.csv", row.names = FALSE)
View(FDO_sigs_ID)
write.table(FDO_sigs_ID, file = "output/DEG_lists/Foot/FDO_sigs_ID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/with_GO_terms/FDO_sigs_ID.csv", row.names = FALSE)
View(FDO_sigs_ID)
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO.IDs, sep = ";")
View(FDO_sigs_ID_cleaned_separated)
FDO_sigs_ID_cleaned_separated$GO.IDs <- trimws(FDO_sigs_ID_cleaned_separated$GO.IDs)
# Vector of GO IDs
FDO_go_ids <- FDO_sigs_ID_cleaned_separated$GO.IDs
# Create custom collection with our GO IDs
FDOmyCollection <- GOCollection(FDO_go_ids)
View(FDOmyCollection)
# Pull out GOslims from GOslim obo file
slim <- getOBOCollection(fl)
# Get Biological Process (BP) GOslims for our GO IDs
slimdf <- goSlim(FDOmyCollection, slim, "BP", verbose)
# Convert to list
FDOgomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
View(slimdf)
View(slim)
View(slimdf)
View(FOW_sigs_ID)
View(slimdf)
View(FDO_sigs_ID_cleaned_separated)
PCAdataG <- plotPCA(vst(ddsG), intgroup = c("treatment"), returnData=TRUE)
library(BiocManager)
PCAdataG <- plotPCA(vst(ddsG), intgroup = c("treatment"), returnData=TRUE)
library(DESeq2)
PCAdataG <- plotPCA(vst(ddsG), intgroup = c("treatment"), returnData=TRUE)
PCAdataG <- plotPCA(vst(ddsG), intgroup = c("treatment"), returnData=TRUE)
percentVarG <- round(100*attr(PCAdataG, "percentVar")) #plot PCA of samples with all data
Gill <- ggplot(PCAdataG, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarG[1],"% variance")) +
ylab(paste0("PC2: ",percentVarG[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)+
theme_classic()+
scale_y_continuous(breaks=c(-80, -40 ,0, 40, 80), limits= c(-80, 80))+
labs(color='Treatment')+
theme(axis.line = element_line(colour = 'black', size = 0.5))
Gill
Gill <- ggplot(PCAdataG, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarG[1],"% variance")) +
ylab(paste0("PC2: ",percentVarG[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)+
theme_classic()+
scale_y_continuous(breaks=c(-80, -40 ,0, 40, 80), limits= c(-80, 80))+
labs(color='Treatment')+
theme(axis.line = element_line(colour = 'black', size = 0.5))+
scale_color_manual(labels = c("Labortory Control", "Treatment Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Gill
p
PCAdataF <- plotPCA(vst(dds3), intgroup = c("treatment"), returnData=TRUE)
PCAdataF <- plotPCA(vst(dds3), intgroup = c("treatment"), returnData=TRUE)
percentVarF <- round(100*attr(PCAdataF, "percentVar")) #plot PCA of samples with all data
Foot <- ggplot(PCAdataF, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10, show.legend = FALSE) +
xlab(paste0("PC1: ",percentVarF[1],"% variance")) +
ylab(paste0("PC2: ",percentVarF[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95, show.legend = FALSE)+
theme_classic()+
labs(color='Treatment')+
xlim(-90, 100)+
scale_color_manual(labels = c("Treatment Control", "Laboratory Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Foot
Foot <- ggplot(PCAdataF, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarF[1],"% variance")) +
ylab(paste0("PC2: ",percentVarF[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95, show.legend = FALSE)+
theme_classic()+
labs(color='Treatment')+
xlim(-90, 100)
Foot
Foot <- ggplot(PCAdataF, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarF[1],"% variance")) +
ylab(paste0("PC2: ",percentVarF[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95, show.legend = FALSE)+
theme_classic()+
labs(color='Treatment')+
xlim(-90, 100)+
scale_color_manual(labels = c("Laboratory Control", "Treatment Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Foot <- ggplot(PCAdataF, aes(PC1, PC2, color=treatment, show.legend = FALSE)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarF[1],"% variance")) +
ylab(paste0("PC2: ",percentVarF[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95, show.legend = FALSE)+
theme_classic()+
labs(color='Treatment')+
xlim(-90, 100)+
scale_color_manual(labels = c("Laboratory Control", "Treatment Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Foot
Foot <- ggplot(PCAdataF, aes(PC1, PC2, color=treatment, show.legend = FALSE)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarF[1],"% variance")) +
ylab(paste0("PC2: ",percentVarF[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95, show.legend = FALSE)+
theme_classic()+
labs(color='Treatment')+
xlim(-90, 100)+
scale_color_manual(labels = c("Laboratory Control", "Treatment Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Foot
PCAdataG <- plotPCA(vst(ddsG), intgroup = c("treatment"), returnData=TRUE)
PCAdataG <- plotPCA(vst(ddsG), intgroup = c("treatment"), returnData=TRUE)
percentVarG <- round(100*attr(PCAdataG, "percentVar")) #plot PCA of samples with all data
Gill <- ggplot(PCAdataG, aes(PC1, PC2, color=treatment)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarG[1],"% variance")) +
ylab(paste0("PC2: ",percentVarG[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95)+
theme_classic()+
scale_y_continuous(breaks=c(-80, -40 ,0, 40, 80), limits= c(-80, 80))+
labs(color='Treatment')+
theme(axis.line = element_line(colour = 'black', size = 0.5))+
scale_color_manual(labels = c("Laboratory Control", "Treatment Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Gill
PCAdataF <- plotPCA(vst(dds3), intgroup = c("treatment"), returnData=TRUE)
percentVarF <- round(100*attr(PCAdataF, "percentVar")) #plot PCA of samples with all data
Foot <- ggplot(PCAdataF, aes(PC1, PC2, color=treatment, show.legend = FALSE)) +
geom_point(size=4, alpha = 5/10) +
xlab(paste0("PC1: ",percentVarF[1],"% variance")) +
ylab(paste0("PC2: ",percentVarF[2],"% variance")) +
coord_fixed()+
stat_ellipse(level=0.95, show.legend = FALSE)+
theme_classic()+
labs(color='Treatment')+
xlim(-90, 100)+
scale_color_manual(labels = c("Laboratory Control", "Treatment Control", "Hypoxia", "Ocean Acidification", "Ocean Warming"), values = c("blue", "lightblue", "purple","green", "red"))
Foot
library(knitr)
library(tidyverse)
library(kableExtra)
library(DT)
library(Biostrings)
library(tm)
library(pheatmap)
library(DESeq2)
git log
library(seqinr)
cds_fna <- "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/cds_from_genomic.fna"
cds_fasta <- "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/cds_from_genomic.fasta"
sequences <- read.fasta(file = cds_fna)
View(sequences)
write.fasta(sequences = sequences,
names = names(sequences),
file.out = output_fasta)
write.fasta(sequences = sequences,
names = names(sequences),
file.out = cds_fasta)
/home/shared/kallisto_linux-v0.50.1/kallisto \
/home/shared/kallisto_linux-v0.50.1/kallisto \
/home/shared/kallisto_linux-v0.50.1/kallisto \
library(knitr)
library(tidyverse)
library(kableExtra)
library(DT)
library(Biostrings)
library(tm)
library(pheatmap)
library(DESeq2)
knitr::opts_chunk$set(
echo = TRUE,         # Display code chunks
eval = FALSE,         # Evaluate code chunks
warning = FALSE,     # Hide warnings
message = FALSE,     # Hide messages
fig.width = 6,       # Set plot width in inches
fig.height = 4,      # Set plot height in inches
fig.align = "center", # Align plots to the center
comment = ""         # Prevents appending '##' to beginning of lines in code output
)
head(genomic.gff)
head(/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/genomic.gff)
head("/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/genomic.gff")
head(/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/genomic.gff)
genomic.gff <- /home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/genomic.gff
genomic.gff <- home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/data/ncbi_dataset/data/GCF_036588685.1/genomic.gff
getwd()
# Step 3: Check Job Status and Download Results
while read -r job_id; do
install.packages("seqinr")
