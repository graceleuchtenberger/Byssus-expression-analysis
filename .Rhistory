# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_periods)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
#clean up data, get rid of NA's and blank cells, and put samples in order
gene_count_matrix <- gene_count_matrix[, order(names(gene_count_matrix))]
treatmentinfo.2 <- treatmentinfo.2[order(treatmentinfo.2),]
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
#Remove sample IDS that match the FX samples
# gene_count_matrix <- gene_count_matrix[, !names(gene_count_matrix) %in% fX_ids, drop = FALSE]
# treatmentinfo.2 <- treatmentinfo.2 %>%
#   filter(!sample.1 %in% fX_ids)
rownames(treatmentinfo.2) <- treatmentinfo.2$sample.1
#Removing T047 from treatment info because there isn't data for that
removal <- which(rownames(treatmentinfo.2)%in% "T047F")
treatmentinfo.2 <- treatmentinfo.2[-removal,]
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
#rename Loc identifier column
write.table(gene_count_matrix, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/gene_count_matrix_clean", row.names = FALSE)
gene_count_matrix <- read_csv("/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/gene_count_matrix.csv")
gene_count_matrix <- data.frame(gene_count_matrix)
rownames(gene_count_matrix) <- gene_count_matrix$gene_id
rownames <- rownames(gene_count_matrix)
gene_count_matrix <- gene_count_matrix[,-1]
rownames(gene_count_matrix) <- rownames
#Change column names in count matrix to adjust to sample name in treatment info
new_column_names <- substr(names(gene_count_matrix), 4, nchar(names(gene_count_matrix)) - 5)
names(gene_count_matrix) <- new_column_names
#Remove remaining periods that are at the front of column names
remove_dash <- function(col_name) {
if (grepl("^\\-", col_name)) {
# Remove period from the beginning of the column name
return(sub("^\\-", "", col_name))
} else {
# Keep the column name unchanged
return(col_name)
}
}
# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_dash)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
remove_periods <- function(col_name) {
if (grepl("^\\.", col_name)) {
# Remove period from the beginning of the column name
return(sub("^\\.", "", col_name))
} else {
# Keep the column name unchanged
return(col_name)
}
}
# Apply the function to all column names
new_column_names <- sapply(names(gene_count_matrix), remove_periods)
# Assign the modified column names to the data frame
names(gene_count_matrix) <- new_column_names
#clean up data, get rid of NA's and blank cells, and put samples in order
gene_count_matrix <- gene_count_matrix[, order(names(gene_count_matrix))]
treatmentinfo.2 <- treatmentinfo.2[order(treatmentinfo.2),]
treatmentinfo.2 <- treatmentinfo.2[complete.cases(treatmentinfo.2), ]
#Remove sample IDS that match the FX samples
# gene_count_matrix <- gene_count_matrix[, !names(gene_count_matrix) %in% fX_ids, drop = FALSE]
# treatmentinfo.2 <- treatmentinfo.2 %>%
#   filter(!sample.1 %in% fX_ids)
rownames(treatmentinfo.2) <- treatmentinfo.2$sample.1
#Removing T047 from treatment info because there isn't data for that
removal <- which(rownames(treatmentinfo.2)%in% "T047F")
treatmentinfo.2 <- treatmentinfo.2[-removal,]
#Check that columns and row names match
all(rownames(treatmentinfo.2) == colnames(gene_count_matrix))
#rename Loc identifier column
write.table(gene_count_matrix, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/gene_count_matrix_clean", row.names = FALSE)
g.spid <- left_join(blast, cdsftab, by = "V1") %>%
mutate(gene = str_extract(V2.y, "(?<=\\[gene=)\\w+")) %>%
select(gene, V11, V2.x) %>%
mutate(SPID = str_extract(V2.x, "(?<=\\|)[^\\|]*(?=\\|)")) %>%
distinct(gene, SPID, .keep_all = TRUE)
g.spid <- left_join(blast, cdsftab, by = "V1") %>%
mutate(gene = str_extract(V2.y, "(?<=\\[gene=)\\w+")) %>%
select(gene, V11, V2.x) %>%
mutate(uniprot_accession = str_extract(V2.x, "(?<=\\|)[^\\|]*(?=\\|)")) %>%
distinct(gene, uniprot_accession, .keep_all = TRUE)
left_join(g.spid, full_blast, by = "uniprot_accession")
blast_with_LOC <- left_join(g.spid, full_blast, by = "uniprot_accession")
View(blast_with_LOC)
blast_with_LOC <- left_join(full_blast, g.spid, by = "uniprot_accession")
blast_with_LOC <- left_join(full_blast, g.spid, by = "uniprot_accession")
View(blast_with_LOC)
LOC_GO_blast <- left_join(full_blast, g.spid, by = "uniprot_accession")
View(LOC_GO_blast)
View(blast)
View(cdsftab)
g.spid <- left_join(blast, cdsftab, by = "V1") %>%
mutate(gene = str_extract(V2.y, "(?<=\\[gene=)\\w+")) %>%
select(gene, V11, V2.x, V1) %>%
mutate(uniprot_accession = str_extract(V2.x, "(?<=\\|)[^\\|]*(?=\\|)")) %>%
distinct(gene, uniprot_accession, .keep_all = TRUE)
View(g.spid)
colnames(g.spid)[4] <- "transcript"
LOC_GO_blast <- left_join(full_blast, g.spid, by = "transcript")
View(LOC_GO_blast)
write.table(LOC_GO_blast, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/LOC_GO_list", row.names = FALSE)
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("output/LOC_GO_list", sep= "\t", header = TRUE)
View(masterID)
write.table(LOC_GO_blast, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/LOC_GO_list.csv", row.names = FALSE)
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("output/LOC_GO_list.csv", sep= "\t", header = TRUE)
View(masterID)
View(LOC_GO_blast)
write.table(LOC_GO_blast, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/LOC_GO_list.csv", row.names = FALSE, quote = TRUE)
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("output/LOC_GO_list.csv", sep= "\t", header = TRUE)
View(masterID)
write.table(LOC_GO_blast, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/LOC_GO_list.txt",sep = "\t", row.names = FALSE, quote = TRUE)
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("output/LOC_GO_list.txt", sep= "\t", header = TRUE)
View(masterID)
#Cut out extras
masterID <- masterID[, -((ncol(masterID)-2):ncol(masterID))]
colnames(masterID)  <- c("transcript", "database","uniprot_accession","geneID","species", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "reviewed", "entryname", "protein_name", "gene_name", "prot_length", "GO_ID", "GO_BP", "GO_MF", "GO_CC", "Genename_orderedlocus", "Pathwaycommons", "Reactome", "Unipathway", "Interacts_with", "LOC")
#FDO_LC_siggene <- read.delim("output/DEG_lists/Foot/FDO_LC_siggene.csv", sep = " ", header = TRUE)
FDO_TC_siggenes_apeglm <- read.delim("output/DEG_lists/Foot/FDO_TC_siggene_apeglm.csv", sep = " ", header = TRUE)
View(FDO_TC_siggenes_apeglm)
FDO_TC_siggenes_apeglm <- FDO_TC_siggenes_apeglm %>%
mutate(LOC_column = str_extract(row_name, "LOC\\d+"))
#FDO_LC_siggene <- read.delim("output/DEG_lists/Foot/FDO_LC_siggene.csv", sep = " ", header = TRUE)
FDO_TC_siggenes_apeglm <- read.delim("output/DEG_lists/Foot/FDO_TC_siggene_apeglm.csv", sep = " ", header = TRUE)
FDO_TC_siggenes_apeglm <- FDO_TC_siggenes_apeglm %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("output/LOC_GO_list.txt", sep= "\t", header = TRUE)
#Cut out extras
masterID <- masterID[, -((ncol(masterID)-2):ncol(masterID))]
colnames(masterID)  <- c("transcript", "database","uniprot_accession","geneID","species", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "reviewed", "entryname", "protein_name", "gene_name", "prot_length", "GO_ID", "GO_BP", "GO_MF", "GO_CC", "Genename_orderedlocus", "Pathwaycommons", "Reactome", "Unipathway", "Interacts_with", "LOC_column")
# Load output of blastx, uniprot, and GO into a single masterID table
masterID <- read.delim("output/LOC_GO_list.txt", sep= "\t", header = TRUE)
#Cut out extras
masterID <- masterID[, -((ncol(masterID)-2):ncol(masterID))]
colnames(masterID)  <- c("transcript", "database","uniprot_accession","geneID","species", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore", "reviewed", "entryname", "protein_name", "gene_name", "organism", "prot_length", "GO_ID", "GO_BP", "GO_MF", "GO_CC", "Genename_orderedlocus", "Induction", "Pathwaycommons", "Reactome", "Unipathway", "Interacts_with", "LOC_column")
FDO_TC_siggene <- left_join(FDO_TC_siggenes_apeglm, masterID, by = "LOC_column")
View(FDO_TC_siggene)
View(FDO_TC_siggene)
FDO_sigs_unID <- FDO_TC_siggene[is.na(FDO_TC_siggene$geneID), ]
FDO_sigs_ID <- FDO_TC_siggene[!is.na(FDO_TC_siggene$geneID), ]
View(FDO_sigs_ID)
nrow(FDO_sigs_ID) # 7 id'ed genes
nrow(FDO_sigs_unID) # 8 unID'd genes
nrow(FDO_sigs_ID) # 7 id'ed genes
nrow(FDO_sigs_ID) # 7 id'ed genes
nrow(FDO_sigs_unID) # 8 unID'd genes
write.table(FDO_TC_siggene, file = "output/DEG_lists/GOterms_genome/FDO_sigs_merged.csv", row.names = FALSE)
write.table(FDO_sigs_unID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_unID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
GDO_sigs_merged <- left_join(GDO_TC_siggene, masterID, by = "LOC_column")
#GDO_LC_siggene <- read.delim("output/DEG_lists/Gill/GDO_LC_siggene.csv", sep = " ", header = TRUE)
GDO_TC_siggene <- read.delim("output/DEG_lists/Gill/GDO_TC_siggene_apeglm.csv", sep = " ", header = TRUE)
GDO_sigs_merged <- left_join(GDO_TC_siggene, masterID, by = "LOC_column")
View(GDO_TC_siggene)
GDO_TC_siggene <- GDO_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
GDO_sigs_merged <- left_join(GDO_TC_siggene, masterID, by = "LOC_column")
View(GDO_TC_siggene)
View(GDO_sigs_merged)
View(masterID)
GDO_sigs_unID <- GDO_sigs_merged[is.na(GDO_sigs_merged$geneID), ]
GDO_sigs_ID <- GDO_sigs_merged[!is.na(GDO_sigs_merged$geneID), ]
nrow(GDO_sigs_ID) # 7 id'ed genes
nrow(GDO_sigs_unID) # 43 unID'd genes
write.table(GDO_sigs_merged, file = "output/DEG_lists/GOterms_genome/GDO_sigs_merged.csv", row.names = FALSE)
write.table(GDO_sigs_unID, file = "output/DEG_lists/GOterms_genome/GDO_sigs_unID.csv", row.names = FALSE)
write.table(GDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/GDO_sigs_ID.csv", row.names = FALSE)
#FOA_LC_siggene <- read.delim("output/DEG_lists/Foot/FOA_LC_siggene.csv", sep = " ", header = TRUE)
FOA_TC_siggene <- read.delim("output/DEG_lists/Foot/FOA_TC_siggene.csv", sep = " ", header = TRUE)
FOA_TC_siggene <- FOA_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
View(FOA_TC_siggene)
View(masterID)
View(FOA_TC_siggene)
FOA_sigs_merged <- left_join(FOA_sigs_merged, masterID, by = "LOC_column")
FOA_sigs_merged <- left_join(FOA_TC_siggene, masterID, by = "LOC_column")
View(FOA_sigs_merged)
FOA_sigs_unID <- FOA_sigs_merged[is.na(FOA_sigs_merged$geneID), ]
FOA_sigs_ID <- FOA_sigs_merged[!is.na(FOA_sigs_merged$geneID), ]
nrow(FOA_sigs_ID) # 3 id'ed genes
nrow(FOA_sigs_unID) # 11 unID'd genes
write.table(FOA_sigs_merged, file = "output/DEG_lists/GOterms_genome/FOA_sigs_merged.csv", row.names = FALSE)
write.table(FOA_sigs_unID, file = "output/DEG_lists/GOterms_genome/FOA_sigs_unID.csv", row.names = FALSE)
write.table(FOA_sigs_ID, file = "output/DEG_lists/GOterms_genome/FOA_sigs_ID.csv", row.names = FALSE)
#GOA_LC_siggene <- read.delim("output/DEG_lists/Gill/GOA_LC_siggene.csv", sep = " ", header = TRUE)
GOA_TC_siggene <- read.delim("output/DEG_lists/Gill/GOA_TC_siggene.csv", sep = " ", header = TRUE)
GOA_TC_siggene <- GOA_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
#
# # Replace values in df_y with values from df_x based on a condition
# GOA_sigs_merged$log2FoldChange.x <- ifelse(!is.na(GOA_sigs_merged$log2FoldChange.y) , GOA_sigs_merged$log2FoldChange.y, GOA_sigs_merged$log2FoldChange.x)
#
# # Drop the extra column "Value_y" if needed
# GOA_sigs_merged <- GOA_sigs_merged[, !(names(GOA_sigs_merged) %in% c("log2FoldChange.y"))]
#
# # change gene column to be called transcript
# colnames(GOA_sigs_merged)  <- c("transcript", "baseMean", "log2FoldChange","lfcSE","pvalue", "padj")
#
GOA_sigs_merged <- left_join(GOA_TC_siggene, masterID, by = "LOC_column")
GOA_sigs_unID <- GOA_sigs_merged[is.na(GOA_sigs_merged$geneID), ]
GOA_sigs_ID <- GOA_sigs_merged[!is.na(GOA_sigs_merged$geneID), ]
nrow(GOA_sigs_ID) # 23 id'ed genes
#GOA_LC_siggene <- read.delim("output/DEG_lists/Gill/GOA_LC_siggene.csv", sep = " ", header = TRUE)
GOA_TC_siggene <- read.delim("output/DEG_lists/Gill/GOA_TC_siggene.csv", sep = " ", header = TRUE)
GOA_TC_siggene <- GOA_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
#
# # Replace values in df_y with values from df_x based on a condition
# GOA_sigs_merged$log2FoldChange.x <- ifelse(!is.na(GOA_sigs_merged$log2FoldChange.y) , GOA_sigs_merged$log2FoldChange.y, GOA_sigs_merged$log2FoldChange.x)
#
# # Drop the extra column "Value_y" if needed
# GOA_sigs_merged <- GOA_sigs_merged[, !(names(GOA_sigs_merged) %in% c("log2FoldChange.y"))]
#
# # change gene column to be called transcript
# colnames(GOA_sigs_merged)  <- c("transcript", "baseMean", "log2FoldChange","lfcSE","pvalue", "padj")
#
GOA_sigs_merged <- left_join(GOA_TC_siggene, masterID, by = "LOC_column")
View(GOA_sigs_ID)
View(GOA_TC_siggene)
GDO_sigs_unID <- GDO_sigs_merged[is.na(GDO_sigs_merged$LOC_column), ]
GDO_sigs_ID <- GDO_sigs_merged[!is.na(GDO_sigs_merged$LOC_column), ]
nrow(GDO_sigs_ID) # 155 id'ed genes
View(GOA_sigs_ID)
GDO_sigs_unID <- GDO_sigs_merged[is.na(GDO_sigs_merged$LOC_column), ]
GDO_sigs_ID <- GDO_sigs_merged[!is.na(GDO_sigs_merged$LOC_column), ]
View(GDO_sigs_ID)
View(GOA_sigs_unID)
View(GDO_sigs_unID)
GDO_sigs_unID <- GDO_sigs_merged[is.na(GDO_sigs_merged$geneID), ]
GDO_sigs_ID <- GDO_sigs_merged[!is.na(GDO_sigs_merged$geneID), ]
GDO_sigs_merged <- left_join(GDO_TC_siggene, masterID, by = "LOC_column")
View(GOA_sigs_merged)
View(GDO_sigs_merged)
GDO_sigs_unID <- GDO_sigs_merged[is.na(GDO_sigs_merged$geneID), ]
GDO_sigs_ID <- GDO_sigs_merged[!is.na(GDO_sigs_merged$geneID), ]
View(GDO_sigs_unID)
nrow(GDO_sigs_ID) # 239 id'ed genes
nrow(GDO_sigs_unID) # 84 unID'd genes
#Write file of merged files
write.table(GDO_sigs_merged, file = "output/DEG_lists/GOterms_genome/GDO_sigs_merged.csv", row.names = FALSE)
write.table(GDO_sigs_unID, file = "output/DEG_lists/GOterms_genome/GDO_sigs_unID.csv", row.names = FALSE)
write.table(GDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/GDO_sigs_ID.csv", row.names = FALSE)
#GOA_LC_siggene <- read.delim("output/DEG_lists/Gill/GOA_LC_siggene.csv", sep = " ", header = TRUE)
GOA_TC_siggene <- read.delim("output/DEG_lists/Gill/GOA_TC_siggene.csv", sep = " ", header = TRUE)
GOA_TC_siggene <- GOA_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
View(GOA_TC_siggene)
#
# # Replace values in df_y with values from df_x based on a condition
# GOA_sigs_merged$log2FoldChange.x <- ifelse(!is.na(GOA_sigs_merged$log2FoldChange.y) , GOA_sigs_merged$log2FoldChange.y, GOA_sigs_merged$log2FoldChange.x)
#
# # Drop the extra column "Value_y" if needed
# GOA_sigs_merged <- GOA_sigs_merged[, !(names(GOA_sigs_merged) %in% c("log2FoldChange.y"))]
#
# # change gene column to be called transcript
# colnames(GOA_sigs_merged)  <- c("transcript", "baseMean", "log2FoldChange","lfcSE","pvalue", "padj")
#
GOA_sigs_merged <- left_join(GOA_TC_siggene, masterID, by = "LOC_column")
View(GDO_sigs_merged)
View(GOA_sigs_merged)
GOA_sigs_unID <- GOA_sigs_merged[is.na(GOA_sigs_merged$geneID) & is.na(GOA_sigs_merged$LOC_column), ]
GOA_sigs_ID <- GOA_sigs_merged[!is.na(GOA_sigs_merged$geneID) & !is.na(GOA_sigs_merged$LOC_column), ]
View(GOA_sigs_ID)
nrow(GOA_sigs_ID) # 23 id'ed genes
nrow(GOA_sigs_unID) # 76 unID'd genes
View(GOA_sigs_merged)
GOA_TC_siggene <- GOA_TC_siggene %>%
filter(!is.na(LOC_column))
GOA_sigs_merged <- left_join(GOA_TC_siggene, masterID, by = "LOC_column")
View(GOA_sigs_merged)
GOA_sigs_unID <- GOA_sigs_merged[is.na(GOA_sigs_merged$geneID) ]
View(GOA_sigs_merged)
GOA_sigs_unID <- GOA_sigs_merged[is.na(GOA_sigs_merged$geneID) ]
GOA_sigs_unID <- GOA_sigs_merged[is.na(GOA_sigs_merged$geneID), ]
GOA_sigs_ID <- GOA_sigs_merged[!is.na(GOA_sigs_merged$geneID), ]
nrow(GOA_sigs_ID) # 23 id'ed genes
nrow(GOA_sigs_unID) # 76 unID'd genes
write.table(GOA_sigs_merged, file = "output/DEG_lists/Gill/GOA_sigs_merged.csv", row.names = FALSE)
write.table(GOA_sigs_unID, file = "output/DEG_lists/Gill/GOA_sigs_unID.csv", row.names = FALSE)
write.table(GOA_sigs_ID, file = "output/DEG_lists/Gill/GOA_sigs_ID.csv", row.names = FALSE)
# FOW_LC_siggene <- read.delim("output/DEG_lists/Foot/FOW_LC_siggene.csv", sep = " ", header = TRUE)
FOW_TC_siggene <- read.delim("output/DEG_lists/Foot/FOW_TC_siggene.csv", sep = " ", header = TRUE)
FOW_TC_siggene <- FOW_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
FOW_sigs_merged <- left_join(FOW_TC_siggene, masterID, by = "transcript")
FOW_sigs_merged <- left_join(FOW_TC_siggene, masterID, by = "LOC_column")
View(FOW_sigs_merged)
FOW_sigs_unID <- FOW_sigs_merged[is.na(FOW_sigs_merged$geneID), ]
FOW_sigs_ID <- FOW_sigs_merged[!is.na(FOW_sigs_merged$geneID), ]
nrow(FOW_sigs_ID) # 9 id'ed genes
nrow(FOW_sigs_unID) # 23 unID'd genes
write.table(GOA_sigs_merged, file = "output/DEG_lists/GOterms_genome/GOA_sigs_merged.csv", row.names = FALSE)
write.table(GOA_sigs_unID, file = "output/DEG_lists/GOterms_genome/GOA_sigs_unID.csv", row.names = FALSE)
write.table(GOA_sigs_ID, file = "output/DEG_lists/GOterms_genome/GOA_sigs_ID.csv", row.names = FALSE)
write.table(FOW_sigs_merged, file = "output/DEG_lists/GOterms_genome/FOW_sigs_merged.csv", row.names = FALSE)
write.table(FOW_sigs_unID, file = "output/DEG_lists/GOterms_genome/FOW_sigs_unID.csv", row.names = FALSE)
write.table(FOW_sigs_ID, file = "output/DEG_lists/GOterms_genome/FOW_sigs_ID.csv", row.names = FALSE)
#GOW_LC_siggene <- read.delim("output/DEG_lists/Gill/GOW_LC_siggene.csv", sep = " ", header = TRUE)
GOW_TC_siggene <- read.delim("output/DEG_lists/Gill/GOW_TC_siggene_apeglm.csv", sep = " ", header = TRUE)
GOW_TC_siggene <- GOW_TC_siggene %>%
mutate(LOC_column = str_extract(gene, "LOC\\d+"))
GOW_sigs_merged <- left_join(GOW_TC_siggene, masterID, by = "transcript")
GOW_sigs_merged <- left_join(GOW_TC_siggene, masterID, by = "LOC_column")
View(GOW_sigs_merged)
GOW_sigs_unID <- GOW_sigs_merged[is.na(GOW_sigs_merged$geneID), ]
GOW_sigs_ID <- GOW_sigs_merged[!is.na(GOW_sigs_merged$geneID), ]
nrow(GOW_sigs_ID) # 7 id'ed genes
nrow(GOW_sigs_unID) # 18 unID'd genes
write.table(GOW_sigs_merged, file = "output/DEG_lists/GOterms_genome/GOW_sigs_merged.csv", row.names = FALSE)
write.table(GOW_sigs_unID, file = "output/DEG_lists/GOterms_genome/GOW_sigs_unID.csv", row.names = FALSE)
write.table(GOW_sigs_ID, file = "output/DEG_lists/GOterms_genome/GOW_sigs_ID.csv", row.names = FALSE)
View(masterID)
BiocManager::install(c("GSEABase", "GO.db"))
View(FDO_sigs_ID)
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID, GO_ID, sep = ";")
FDO_sigs_ID_cleaned_separated$GO.IDs <- trimws(FDO_sigs_ID_cleaned_separated$GO_ID)
View(FDO_sigs_ID_cleaned_separated)
library(GSEABase)
# Load GO slim data (you may need to download your specific slim dataset)
go_slim <- getOBOCollection("http://current.geneontology.org/ontology/subsets/goslim_generic.obo")
# Define your list of GO terms (this would usually be extracted from your data)
go_terms <- FDO_sigs_ID_cleaned_separated$GO_ID
map_to_slim <- function(go_term, go_slim) {
slim_terms <- termId(go_slim)
if (go_term %in% slim_terms) {
return(go_term)
} else {
# Find the most specific parent in the GO slim
slim_ancestor <- slimOnto(go_term, go_slim)
if (!is.null(slim_ancestor)) {
return(slim_ancestor)
} else {
return(NA)
}
}
# Vector of GO IDs
go_ids <- FDO_sigs_ID_cleaned_separated$GO_ID
# Create custom collection with our GO IDs
myCollection <- GOCollection(go_ids)
# Pull out GOslims from GOslim obo file
slim <- getOBOCollection(fl)
# Get Biological Process (BP) GOslims for our GO IDs
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# Convert to list
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Map our GOIDs to GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# sapply needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Vector of GO IDs
go_ids <- FDO_sigs_ID_cleaned_separated$GO_ID
# Create custom collection with our GO IDs
myCollection <- GOCollection(go_ids)
# Pull out GOslims from GOslim obo file
slim <- getOBOCollection(fl)
# Get Biological Process (BP) GOslims for our GO IDs
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# Convert to list
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Map our GOIDs to GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# sapply needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "charcter(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
# Add self-matching GOIDs to "ids" column, if not present
updated_slimdf <- slimdf
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(updated_slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(updated_slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(updated_slimdf$ids) > 0 && nchar(updated_slimdf$ids[nrow(updated_slimdf)]) > 0) {
updated_slimdf[go_id, "ids"] <- paste0(updated_slimdf[go_id, "ids"], "; ", go_id)
} else {
updated_slimdf[go_id, "ids"] <- go_id
}
}
}
}
str(updated_slimdf)
# Vector of GO IDs
go_ids <- FDO_sigs_ID_cleaned_separated$GO_ID
# Create custom collection with our GO IDs
myCollection <- GOCollection(go_ids)
# Pull out GOslims from GOslim obo file
slim <- getOBOCollection(fl)
write.table(FOA_sigs_ID, file = "output/DEG_lists/GOterms_genome/FOA_sigs_ID.csv", row.names = FALSE)
write.table(FOA_sigs_ID, file = "output/DEG_lists/GOterms_genome/FOA_sigs_ID.csv", row.names = FALSE)
View(FDO_sigs_ID)
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
FDO_sigs_ID <- FDO_TC_siggene[!is.na(FDO_TC_siggene$geneID), ]
View(FDO_sigs_ID)
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv")
write.table(FDO_sigs_ID, file = "output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
View(FDO_sigs_ID)
write.table(FDO_sigs_ID, file = "/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv", row.names = FALSE)
FDO_sigs_ID <- read.table("/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv",
header = FALSE,
sep = "\t"
)
View(FDO_sigs_ID)
FDO_sigs_ID <- read.table("/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv",
header = FALSE,
sep = " "
)
View(FDO_sigs_ID)
FDO_sigs_ID <- read.table("/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv",
sep = " "
)
# Read in tab-delimited file
FDO_sigs_ID <- read.csv("/home/shared/8TB_HDD_02/graceleuchtenberger/Github/byssus-exp-analysis/output/DEG_lists/GOterms_genome/FDO_sigs_ID.csv",
sep = " "
)
# Remove rows with no GO ID
FDO_sigs_ID_cleaned <- FDO_sigs_ID[!(FDO_sigs_ID$GO_ID == ""), ]
View(FDO_sigs_ID_cleaned)
# "Flatten" file so each row is single GO ID with corresponding gene
FDO_sigs_ID_cleaned_separated <- separate_rows(my_data_cleaned, V1, sep = ";")
# "Flatten" file so each row is single GO ID with corresponding gene
FDO_sigs_ID_cleaned_separated <- separate_rows(FDO_sigs_ID_cleaned, GO_ID, sep = ";")
View(FDO_sigs_ID_cleaned_separated)
str(FDO_sigs_ID_cleaned_separated)
gseabase_location <- find.package("GSEABase")
goslim_obo_dest <- file.path(gseabase_location, "extdata", goslims, fsep = "/")
goslims <- "goslim_generic.obo"
goslims_url <- "http://current.geneontology.org/ontology/subsets/goslim_generic.obo"
# Function for mapping GOIDs to GOslims
mappedIds <- function(df, collection, OFFSPRING, goannotGSC) {
# Split semi-colon delimited strings in df$ids
df$ids_split <- strsplit(as.character(df$ids), ";")
# Determine the maximum number of elements per row
max_elements <- max(lengths(df$ids_split))
# Fill in shorter rows with NA values
df$ids_split <- lapply(df$ids_split, function(x) {
length(x) <- max_elements
x
})
# Combine the split strings into a matrix
ids_mat <- do.call(rbind, df$ids_split)
# Convert the matrix to a data frame
ids_df <- as.data.frame(ids_mat, stringsAsFactors = FALSE)
# Rename the columns of the data frame
colnames(ids_df) <- paste0("ids_", 1:max_elements)
# Combine the original data frame and the new data frame
df <- cbind(df, ids_df)
# Perform the matching operation
mt <- match(toupper(trimws(df$ids_1)), toupper(trimws(names(goannotGSC))))
# Add a new column to the data frame for the "Genes" result
df$Genes <- NA_character_
# Fill in the "Genes" column for rows that have a match
df$Genes[!is.na(mt)] <- vapply(geneIds(goannotGSC)[mt[!is.na(mt)]],
paste, collapse = ";", character(1L))
df <- df %>% dplyr::select(Count, Percent, Term, ids, Genes)
# Return the modified data frame
return(df)
}
gseabase_location <- find.package("GSEABase")
goslim_obo_dest <- file.path(gseabase_location, "extdata", goslims, fsep = "/")
download.file(url = goslims_url,
destfile = goslim_obo_dest)
fl <- system.file("extdata", goslims, package="GSEABase")
# Vector of GO IDs
go_ids <- FDO_sigs_ID_cleaned_separated$GO_ID
# Create custom collection with our GO IDs
myCollection <- GOCollection(go_ids)
# Pull out GOslims from GOslim obo file
slim <- getOBOCollection(fl)
# Get Biological Process (BP) GOslims for our GO IDs
slimdf <- goSlim(myCollection, slim, "BP", verbose)
# Convert to list
gomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])
# Map our GOIDs to GOslims
mapped <- lapply(gomap, intersect, ids(myCollection))
# sapply needed to apply paste() to create semi-colon delimited values
slimdf$ids <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=";")
# Remove "charcter(0) string from "ids" column
slimdf$ids[slimdf$ids == "character(0)"] <- ""
# Add self-matching GOIDs to "ids" column, if not present
updated_slimdf <- slimdf
for (go_id in go_ids) {
# Check if the go_id is present in the row names
if (go_id %in% rownames(updated_slimdf)) {
# Check if the go_id is not present in the ids column
# Also removes white space "trimws()" and converts all to upper case to handle
# any weird, "invisible" formatting issues.
if (!go_id %in% trimws(toupper(strsplit(updated_slimdf[go_id, "ids"], ";")[[1]]))) {
# Append the go_id to the ids column with a semi-colon separator
if (length(updated_slimdf$ids) > 0 && nchar(updated_slimdf$ids[nrow(updated_slimdf)]) > 0) {
updated_slimdf[go_id, "ids"] <- paste0(updated_slimdf[go_id, "ids"], "; ", go_id)
} else {
updated_slimdf[go_id, "ids"] <- go_id
}
}
}
}
str(updated_slimdf)
View(updated_slimdf)
# Group by unique GO ID
grouped_df <- my_data_cleaned_separated %>% group_by(V1)%>% summarise(V2 = paste(V2, collapse = ","))
View(FDO_sigs_ID_cleaned_separated)
